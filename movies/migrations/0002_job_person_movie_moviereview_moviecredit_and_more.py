# Generated by Django 5.0.3 on 2024-04-11 21:50
# Este archivo de migración fue generado por Django 5.0.3 el 11 de abril de 2024 a las 21:50.

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

class Migration(migrations.Migration):
    # Define una nueva migración que hereda de migrations.Migration.

    dependencies = [
        ('movies', '0001_initial'),  # Dependencia de otra migración llamada '0001_initial' del módulo 'movies'.
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),  # Dependencia del modelo de usuario definido en la configuración de Django.
    ]

    operations = [
        migrations.CreateModel(
            name='Job',
            # Crea un nuevo modelo llamado 'Job'.

            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                # Campo 'id' de tipo BigAutoField, que es un campo autoincremental grande.
                # Se crea automáticamente, es clave primaria y no se serializa (no se convierte en JSON).
                # verbose_name es una etiqueta legible para humanos para este campo, en este caso 'ID'.

                ('name', models.CharField(max_length=200)),
                # Campo 'name' de tipo CharField, que es un campo de texto con longitud máxima de 200 caracteres.
            ],
        ),
        migrations.CreateModel(
            name='Person',
            # Crea un nuevo modelo llamado 'Person'.

            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                # Campo 'id' de tipo BigAutoField, que es un campo autoincremental grande.
                # Se crea automáticamente, es clave primaria y no se serializa (no se convierte en JSON).
                # verbose_name es una etiqueta legible para humanos para este campo, en este caso 'ID'.

                ('name', models.CharField(max_length=128)),
                # Campo 'name' de tipo CharField, que es un campo de texto con longitud máxima de 128 caracteres.
            ],
        ),
        migrations.CreateModel(
            name='Movie',
            # Crea un nuevo modelo llamado 'Movie'.

            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                # Campo 'id' de tipo BigAutoField, que es un campo autoincremental grande.
                # Se crea automáticamente, es clave primaria y no se serializa (no se convierte en JSON).
                # verbose_name es una etiqueta legible para humanos para este campo, en este caso 'ID'.

                ('title', models.CharField(max_length=200)),
                # Campo 'title' de tipo CharField, que es un campo de texto con longitud máxima de 200 caracteres.

                ('overview', models.TextField()),
                # Campo 'overview' de tipo TextField, que es un campo de texto largo.

                ('release_date', models.DateTimeField()),
                # Campo 'release_date' de tipo DateTimeField, que representa una fecha y hora.

                ('running_time', models.IntegerField()),
                # Campo 'running_time' de tipo IntegerField, que representa un número entero.

                ('budget', models.IntegerField(blank=True)),
                # Campo 'budget' de tipo IntegerField, que representa un número entero, y es opcional (puede ser nulo).

                ('tmdb_id', models.IntegerField(blank=True, unique=True)),
                # Campo 'tmdb_id' de tipo IntegerField, que representa un número entero, y es opcional (puede ser nulo) y único.

                ('revenue', models.IntegerField(blank=True)),
                # Campo 'revenue' de tipo IntegerField, que representa un número entero, y es opcional (puede ser nulo).

                ('poster_path', models.URLField(blank=True)),
                # Campo 'poster_path' de tipo URLField, que representa una URL, y es opcional (puede ser nulo).

                ('genres', models.ManyToManyField(to='movies.genre')),
                # Campo 'genres' de tipo ManyToManyField, que representa una relación muchos a muchos con el modelo 'Genre' del módulo 'movies'.
            ],
        ),
        migrations.CreateModel(
            name='MovieReview',
            # Crea un nuevo modelo llamado 'MovieReview'.

            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                # Campo 'id' de tipo BigAutoField, que es un campo autoincremental grande.
                # Se crea automáticamente, es clave primaria y no se serializa (no se convierte en JSON).
                # verbose_name es una etiqueta legible para humanos para este campo, en este caso 'ID'.

                ('rating', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                # Campo 'rating' de tipo PositiveSmallIntegerField, que representa un número entero positivo pequeño.
                # Tiene validadores para asegurar que el valor esté entre 1 y 100.

                ('review', models.TextField(blank=True)),
                # Campo 'review' de tipo TextField, que es un campo de texto largo y es opcional (puede ser nulo).

                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.movie')),
                # Campo 'movie' de tipo ForeignKey, que establece una relación uno a muchos con el modelo 'Movie' del módulo 'movies'.
                # Utiliza la eliminación en cascada, lo que significa que si se elimina una película, se eliminarán todas las críticas asociadas.

                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                # Campo 'user' de tipo ForeignKey, que establece una relación uno a muchos con el modelo de usuario definido en la configuración de Django.
                # Utiliza la eliminación en cascada, lo que significa que si se elimina un usuario, se eliminarán todas las críticas asociadas a ese usuario.
            ],
        ),
        migrations.CreateModel(
            name='MovieCredit',
            # Crea un nuevo modelo llamado 'MovieCredit'.

            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                # Campo 'id' de tipo BigAutoField, que es un campo autoincremental grande.
                # Se crea automáticamente, es clave primaria y no se serializa (no se convierte en JSON).
                # verbose_name es una etiqueta legible para humanos para este campo, en este caso 'ID'.

                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.job')),
                # Campo 'job' de tipo ForeignKey, que establece una relación uno a muchos con el modelo 'Job' del módulo 'movies'.
                # Utiliza la eliminación en cascada, lo que significa que si se elimina un trabajo, se eliminarán todas las entradas de créditos asociadas a ese trabajo.

                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.movie')),
                # Campo 'movie' de tipo ForeignKey, que establece una relación uno a muchos con el modelo 'Movie' del módulo 'movies'.
                # Utiliza la eliminación en cascada, lo que significa que si se elimina una película, se eliminarán todas las entradas de créditos asociadas a esa película.

                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.person')),
                # Campo 'person' de tipo ForeignKey, que establece una relación uno a muchos con el modelo 'Person' del módulo 'movies'.
                # Utiliza la eliminación en cascada, lo que significa que si se elimina una persona, se eliminarán todas las entradas de créditos asociadas a esa persona.
            ],
        ),
        migrations.AddField(
            model_name='movie',
            name='credits',
            field=models.ManyToManyField(through='movies.MovieCredit', to='movies.person'),
            # Agrega un campo 'credits' al modelo 'Movie', que establece una relación muchos a muchos con el modelo 'Person' a través del modelo 'MovieCredit' del módulo 'movies'.
        ),
    ]
    # Lista de operaciones de migración que se deben realizar.
